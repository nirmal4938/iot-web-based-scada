This example provides a sample implementation of a simple GLG viewer application
that uses the GLG tags feature in a generic way, allowing to animate any GLG
drawing created in the GLG Builder or GLG HMI Configurator.

The program loads a specified GLG drawing, queries a list of all tags defined in
the drawing at design time and animates the drawing with data.

The user can navigate between various drawings using HTML buttons on a web
page. The drawing filename corresponding to each button is specified in
simple_viewer.html.

In this example, the default drawing name is "tags_example.g" loaded by clicking
on the "Process Overview" button.

Data connectivity between dynamic graphical parameters and the data acquisition
system is defined at design time in the GLG editor, by attaching a tag to the
data-driven dynamic attribute and defining a TagSource that represents a
database field (data variable) that will be used to drive the animation at
run-time.

Dynamic data values for animation are supplied by the DataFeed object.
Simulated demo data are generated by DemoDataFeed, and live application data are
generated by the LiveDataFeed. The application developer should provide custom
data acquisition code in LiveDataFeed class to communicate with the application
specific data acquisition system.

Upon drawing loading, the program obtains a list of tags defined in the drawing
and builds TagRecords array with objects of type GlgTagRecord containing tag
information. After the drawing is displayed, the program periodically queries
new data values for all tags in the list and pushes the new values into the
graphics.

When a web page is used on a mobile device, adjustments are made to take into
account devicePixelRatio of the device:

   SetCanvasResolution() sets scaling factors for the GLG rendering engine.
   AdjustForMobileDevices() makes desired adjustments in the loaded drawing.

To use live data for animation:

1. Provide custom implementation of the Read/Write methods in LiveDataFeed.java.
2. Set RANDOM_DATA flag in SimpleViewer.js to false.

This example is written using GLG Standard API.
